" Vim plugins and specific changes

call plug#begin()
" System Specific
  Plug 'tpope/vim-dispatch'
  Plug 'jgdavey/tslime.vim'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-obsession'
  Plug 'dhruvasagar/vim-prosession'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired' " - Base textobj plugin
  Plug 'kana/vim-textobj-user' " - c for comment
  " Plug 'glts/vim-textobj-comment', { 'on': ['<Plug>(textobj-comment', ]} " - d/D for underscore section (e.g. `did` on foo_b|ar_baz -> foo__baz)
  " Plug 'machakann/vim-textobj-delimited' " - i     for indent level
  " Plug 'kana/vim-textobj-indent', { 'on': ['<Plug>(textobj-indent', ]} " - l for current line
  " Plug 'kana/vim-textobj-line', { 'on': ['<Plug>(textobj-line', ]} " - u for url
  " Plug 'mattn/vim-textobj-url', { 'on': ['<Plug>(textobj-url', ]} " - b for any block type (parens, braces, quotes, ltgt)
  " Plug 'rhysd/vim-textobj-anyblock' " - =/i=  for conflicts marked blocks
  " Plug 'rhysd/vim-textobj-conflict' " - x for xml attr like `data-content='everything'`
  Plug 'kana/vim-textobj-function' " These rely on base textobj-function
  " Plug 'thinca/vim-textobj-function-javascript', { 'for': [ 'javascript' ] }
  " Plug 'Valloric/MatchTagAlways'
  Plug 'terryma/vim-expand-region'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'christoomey/vim-tmux-runner'

" Command Specific
  Plug 'tpope/vim-surround'
  Plug 'tomtom/tcomment_vim'
  Plug 'mileszs/ack.vim'
  Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
  Plug 'junegunn/fzf.vim'
  Plug 'w0rp/ale'
  Plug 'Raimondi/delimitMate'
  Plug 'mattn/emmet-vim'
  Plug 'AndrewRadev/splitjoin.vim'
"  Plug 'Shougo/neocomplete'
"  Plug 'Shougo/neosnippet'
"  Plug 'Shougo/neosnippet-snippets'
  " Plug 'SirVer/ultisnips'
  " Plug 'ervandew/supertab'
  " Plug 'Valloric/YouCompleteMe', {'dir': '~/.vim/plugged/YouCompleteMe', 'do': './install.py --tern-completer --clang-completer'}
  " Plug 'justinj/vim-react-snippets'
  " Plug 'honza/vim-snippets'

" Interface Specific
  Plug 'scrooloose/nerdtree'
  " Plug 'jistr/vim-nerdtree-tabs'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'airblade/vim-gitgutter'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  " Plug 'nathanaelkane/vim-indent-guides'
  Plug 'ryanoasis/vim-devicons'
  Plug 'ap/vim-css-color'
  Plug 'vimwiki/vimwiki'
  Plug 'kien/rainbow_parentheses.vim'
  Plug 'suan/vim-instant-markdown'

" Programming General Plugins
  Plug 'majutsushi/tagbar'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-liquid', {'for': 'liquid'}
  " Plug 'ludovicchabant/vim-gutentags'
  Plug 'plasticboy/vim-markdown', { 'for': ['md', 'markdown'] }

" Language Specific
  Plug 'stanangeloff/php.vim', {'for': 'php'}
  Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}
  Plug 'arnaud-lb/vim-php-namespace', {'for': 'php'}
  Plug 'vim-php/tagbar-phpctags.vim', {'for': 'php'}

" Ruby
  Plug 'nelstrom/vim-textobj-rubyblock', { 'for': 'rb' }
  Plug 'vim-ruby/vim-ruby', { 'for': 'rb' }
  Plug 'tpope/vim-rails', { 'for': 'rb' }
  " Plug 'tpope/vim-bundler', { 'for': 'rb' }
  Plug 'thoughtbot/vim-rspec', { 'for': 'rb' }

" Python
  Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'py' }
  Plug 'nvie/vim-flake8', { 'for': 'py' }
  Plug 'raimon49/requirements.txt.vim', { 'for': 'requirements' }

" Javascript
  Plug 'elzr/vim-json'
  Plug 'pangloss/vim-javascript'
  Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'mxw/vim-jsx'
  " Plug 'moll/vim-node'
  " Plug 'othree/jspc.vim'
  " Plug 'maxmellon/vim-jsx-pretty'
  Plug 'ternjs/tern_for_vim', {'do': 'sudo npm -g install'}

" HTML / CSS
  Plug 'cakebaker/scss-syntax.vim', {'for': ['scss','sass']}
  Plug 'hail2u/vim-css3-syntax', {'for': ['css','scss','sass']}
  " Plug 'othree/html5.vim', {'for': ['html','erb', 'php']}
  " Plug 'othree/html5-syntax.vim', {'for': ['html','erb', 'php']}
  " Plug 'vim-scripts/HTML-AutoCloseTag'

" Colorscheme Sections of the site
  Plug 'nanotech/jellybeans.vim'
  Plug 'altercation/vim-colors-solarized'
  Plug 'endel/vim-github-colorscheme'
  Plug 'vim-scripts/Gummybears'
  Plug 'morhetz/gruvbox'
  Plug 'marciomazza/vim-brogrammer-theme'
  Plug 'chriskempson/vim-tomorrow-theme'
  Plug 'scwood/vim-hybrid'
  Plug 'rakr/vim-one'
  Plug 'joshdick/onedark.vim'
  Plug 'NLKNguyen/papercolor-theme'
  Plug 'davb5/wombat256dave'
  Plug 'tomasiser/vim-code-dark'
call plug#end()

  " make YCM compatible with UltiSnips (using supertab)
  let g:ycm_key_list_select_completion = ["<C-n>", "<Down>"]
  let g:ycm_key_list_previous_completion = ["<C-p>", "<Up>"]
  let g:SuperTabDefaultCompletionType = "<C-n>"

  " better key bindings for UltiSnipsExpandTrigger
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsExpandTrigger="<C-e>"

  let g:ycm_auto_trigger = 1
  let g:ycm_add_preview_to_completeopt = 0
  let g:ycm_autoclose_preview_window_after_completion = 1
  let g:ycm_autoclose_preview_window_after_insertion = 1
  let g:ycm_confirm_extra_conf = 0
  let g:ycm_min_num_of_chars_for_completion = 2

" NERDTree {{{

  map <C-\> :NERDTreeToggle<CR>
  autocmd StdinReadPre * let s:std_in=1
  " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  let NERDTreeShowHidden=0
  let g:NERDTreeWinSize=45
  let g:NERDTreeAutoDeleteBuffer=1

  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction

  call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#141e23')
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#141e23')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#141e23')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#141e23')
  call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#141e23')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#141e23')
  call NERDTreeHighlightFile('ts', 'Blue', 'none', '#6699cc', '#141e23')
  call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#141e23')
  call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#141e23')

"}}}


" ALE Linter {{{

  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = '⚠'

  let g:ale_statusline_format = ['✗ %d', '⚠ %d', '⬥ ok']

  let g:ale_echo_msg_error_str = 'Error'
  let g:ale_echo_msg_warning_str = 'Warn'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

  set statusline+=%#warningmsg#
  set statusline+=%{ALEGetStatusLine()}
  set statusline+=%*

" }}}

" Gutentags {{{

let g:gutentags_cache_dir = '~/.vim/gutentags'

let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js', '*.json', '*.xml',
                                \ '*.phar', '*.ini', '*.rst', '*.md',
                                \ '*vendor/*/test*', '*vendor/*/Test*',
                                \ '*vendor/*/fixture*', '*vendor/*/Fixture*',
                                \ '*var/cache*', '*var/log*']

" }}}
