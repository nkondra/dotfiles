" Vim plugins and specific changes

call plug#begin()
" System Specific
  Plug 'tpope/vim-dispatch'
  Plug 'jgdavey/tslime.vim'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-obsession'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired' " - Base textobj plugin
  Plug 'kana/vim-textobj-user' " - c for comment
  Plug 'glts/vim-textobj-comment', { 'on': ['<Plug>(textobj-comment', ]} " - d/D for underscore section (e.g. `did` on foo_b|ar_baz -> foo__baz)
  Plug 'machakann/vim-textobj-delimited' " - i     for indent level
  Plug 'kana/vim-textobj-indent', { 'on': ['<Plug>(textobj-indent', ]} " - l for current line
  Plug 'kana/vim-textobj-line', { 'on': ['<Plug>(textobj-line', ]} " - u for url
  Plug 'mattn/vim-textobj-url', { 'on': ['<Plug>(textobj-url', ]} " - b for any block type (parens, braces, quotes, ltgt)
  Plug 'rhysd/vim-textobj-anyblock' " - =/i=  for conflicts marked blocks
  Plug 'rhysd/vim-textobj-conflict' " - x for xml attr like `data-content="everything"`
  Plug 'kana/vim-textobj-function' " These rely on base textobj-function
  Plug 'thinca/vim-textobj-function-javascript', { 'for': [ 'javascript' ] }
  Plug 'Valloric/MatchTagAlways'
  Plug 'terryma/vim-expand-region'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'christoomey/vim-tmux-runner'
  Plug 'kien/rainbow_parentheses.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'ryanoasis/vim-devicons'
  Plug 'Xuyuanp/nerdtree-git-plugin'

" Command Specific
  Plug 'tpope/vim-surround'
  Plug 'tomtom/tcomment_vim'
  Plug 'mileszs/ack.vim'
  Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
  Plug 'junegunn/fzf.vim'
  Plug 'w0rp/ale'
  Plug 'Raimondi/delimitMate'
  Plug 'mattn/emmet-vim'
  Plug 'AndrewRadev/splitjoin.vim'
  Plug 'Shougo/neocomplete'
  Plug 'Shougo/neosnippet'
  Plug 'Shougo/neosnippet-snippets'
  " Plug 'SirVer/ultisnips'
  " Plug 'ervandew/supertab'
  " Plug 'Valloric/YouCompleteMe', {'dir': '~/.vim/plugged/YouCompleteMe', 'do': './install --tern-completer --clang-completer'}
  Plug 'justinj/vim-react-snippets'
  Plug 'honza/vim-snippets'

" Interface Specific
  Plug 'airblade/vim-gitgutter'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
"  Plug 'nathanaelkane/vim-indent-guides'
  " Plug 'majutsushi/tagbar'
  Plug 'ap/vim-css-color'
  Plug 'vimwiki/vimwiki'
  Plug 'suan/vim-instant-markdown'
  Plug 'sheerun/vim-polyglot'

" Language Specific
"  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'
  Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}
  Plug 'stanangeloff/php.vim', {'for': 'php'}
  Plug 'tpope/vim-liquid', {'for': 'liquid'}

" Ruby
  Plug 'nelstrom/vim-textobj-rubyblock'
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'
  Plug 'thoughtbot/vim-rspec'

" Python
  Plug 'Vimjas/vim-python-pep8-indent'
  Plug 'raimon49/requirements.txt.vim', { 'for': 'requirements' }


" Javascript
  Plug 'elzr/vim-json'
  Plug 'pangloss/vim-javascript'
  Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'mxw/vim-jsx'
  Plug 'moll/vim-node'
  Plug 'othree/jspc.vim'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'ternjs/tern_for_vim', {'do': 'sudo npm -g install'}

" HTML / CSS
  Plug 'cakebaker/scss-syntax.vim', {'for': ['scss','sass']}
  Plug 'hail2u/vim-css3-syntax', {'for': ['css','scss','sass']}
  Plug 'othree/html5.vim', {'for': ['html','erb']}
  Plug 'othree/html5-syntax.vim', {'for': ['html','erb']}
  Plug 'vim-scripts/HTML-AutoCloseTag'


" Colorscheme Sections of the site
  Plug 'nanotech/jellybeans.vim'
  Plug 'altercation/vim-colors-solarized'
  Plug 'endel/vim-github-colorscheme'
  Plug 'vim-scripts/Gummybears'
  Plug 'morhetz/gruvbox'
  Plug 'marciomazza/vim-brogrammer-theme'
  Plug 'chriskempson/vim-tomorrow-theme'
  Plug 'scwood/vim-hybrid'
  Plug 'rakr/vim-one'
  Plug 'joshdick/onedark.vim'
  Plug 'NLKNguyen/papercolor-theme'
  Plug 'davb5/wombat256dave'
  Plug 'tomasiser/vim-code-dark'
call plug#end()


" NERDTree {{{

  map <C-\> :NERDTreeToggle<CR>
  autocmd StdinReadPre * let s:std_in=1
  " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  let NERDTreeShowHidden=0
  let g:NERDTreeWinSize=45
  let g:NERDTreeAutoDeleteBuffer=1

  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction

  call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#141e23')
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#141e23')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#141e23')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#141e23')
  call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#141e23')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#141e23')
  call NERDTreeHighlightFile('ts', 'Blue', 'none', '#6699cc', '#141e23')
  call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#141e23')
  call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#141e23')

"}}}

" neocomplete {{{

  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  let g:neocomplete#data_directory = '~/.vim/neocomplete'

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
          \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " increase limit for tag cache files
  let g:neocomplete#sources#tags#cache_limit_size = 33554432 " 32MB

  " always use completions from all buffers
  if !exists('g:neocomplete#same_filetypes')
    let g:neocomplete#same_filetypes = {}
  endif
  let g:neocomplete#same_filetypes._ = '_'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

  " AutoComplPop like behavior.
  let g:neocomplete#enable_auto_select = 1

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.rb = '[^. *\t]\.\h\w*\|\h\w*::\w*'

" }}}

" NEOsnippets {{{

  " Plugin key-mappings.
  " Note It must be 'imap' and 'smap'.  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note It must be 'imap' and 'smap'.  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1

  " Tell Neosnippet about the other snippets
  " let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" }}}

" ALE Linter {{{

  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = '⚠'

  let g:ale_statusline_format = ['✗ %d', '⚠ %d', '⬥ ok']

  let g:ale_echo_msg_error_str = 'Error'
  let g:ale_echo_msg_warning_str = 'Warn'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

  set statusline+=%#warningmsg#
  set statusline+=%{ALEGetStatusLine()}
  set statusline+=%*

" }}}
