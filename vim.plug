" Vim plugins and specific changes

call plug#begin()
" System Specific
  Plug 'tpope/vim-dispatch'
  Plug 'jgdavey/tslime.vim'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-obsession'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-indent'
  Plug 'Valloric/MatchTagAlways'
  Plug 'terryma/vim-expand-region'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'christoomey/vim-tmux-runner'
  Plug 'kien/rainbow_parentheses.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'ryanoasis/vim-devicons'
  Plug 'Xuyuanp/nerdtree-git-plugin'

" Command Specific
  Plug 'tpope/vim-surround'
  Plug 'tomtom/tcomment_vim'
  Plug 'mileszs/ack.vim'
  Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
  Plug 'junegunn/fzf.vim'
  Plug 'w0rp/ale'
  Plug 'Raimondi/delimitMate'
  Plug 'mattn/emmet-vim'
  Plug 'AndrewRadev/splitjoin.vim'
"  Plug 'Shougo/neocomplete'
"  Plug 'Shougo/neosnippet'
"  Plug 'Shougo/neosnippet-snippets'
  Plug 'SirVer/ultisnips'
  Plug 'ervandew/supertab'
  Plug 'Valloric/YouCompleteMe', {'dir': '~/.vim/plugged/YouCompleteMe', 'do': './install --tern-completer --clang-completer'}
  Plug 'justinj/vim-react-snippets'
  Plug 'honza/vim-snippets'
  Plug 'ternjs/tern_for_vim', {'do': 'sudo npm -g install'}

" Interface Specific
  Plug 'airblade/vim-gitgutter'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
"  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'majutsushi/tagbar'
  Plug 'ap/vim-css-color'
  Plug 'vimwiki/vimwiki'
  Plug 'sheerun/vim-polyglot'

" Language Specific
"  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'
  Plug 'stanangeloff/php.vim', {'for': 'php'}
  Plug 'tpope/vim-liquid', {'for': 'liquid'}
" Ruby
  Plug 'nelstrom/vim-textobj-rubyblock'
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-bundler'
  Plug 'thoughtbot/vim-rspec'

" Javascript
  Plug 'pangloss/vim-javascript'
  Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'mxw/vim-jsx'
  Plug 'moll/vim-node'
  Plug 'othree/jspc.vim'
" HTML / CSS
  Plug 'cakebaker/scss-syntax.vim', {'for': ['scss','sass']}
  Plug 'hail2u/vim-css3-syntax', {'for': ['css','scss','sass']}
  Plug 'othree/html5.vim', {'for': ['html','erb']}
  Plug 'othree/html5-syntax.vim', {'for': ['html','erb']}
  Plug 'vim-scripts/HTML-AutoCloseTag'


" Colorscheme Sections of the site
  Plug 'nanotech/jellybeans.vim'
  Plug 'altercation/vim-colors-solarized'
  Plug 'endel/vim-github-colorscheme'
  Plug 'vim-scripts/Gummybears'
  Plug 'morhetz/gruvbox'
  Plug 'marciomazza/vim-brogrammer-theme'
  Plug 'chriskempson/vim-tomorrow-theme'
  Plug 'scwood/vim-hybrid'
  Plug 'rakr/vim-one'
  Plug 'joshdick/onedark.vim'
  Plug 'NLKNguyen/papercolor-theme'
  Plug 'davb5/wombat256dave'
  Plug 'tomasiser/vim-code-dark'
call plug#end()



" Color scheme specifics configurations
set background=dark
let g:gruvbox_italic = 1
let g:one_allow_italics = 1
let g:jellybeans_use_term_italics = 1
let g:gummybears_use_term_italics = 1
let g:onedark_terminal_italics = 1
let g:airline_theme='codedark'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

colorscheme onedark

" Configurations for tmux navigator github.com/christoomey/vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1

" Custom runner for rspec to hook into dispatcher
" let g:rspec_command = "Dispatch bundle exec rspec {spec}"
let g:rspec_command = 'call Send_to_Tmux("rspec -f d {spec}\n")'

" Setting custom tag match highlighting
let g:mta_filetypes = {
  \ 'html' : 1,
  \ 'xhtml' : 1,
  \ 'xml' : 1,
  \ 'eruby' : 1
  \}

" Always have rainbow parens on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" NERDTree {{{

  map <C-\> :NERDTreeToggle<CR>
  autocmd StdinReadPre * let s:std_in=1
  " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  let NERDTreeShowHidden=0
  let g:NERDTreeWinSize=45
  let g:NERDTreeAutoDeleteBuffer=1

  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction

  call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#141e23')
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#141e23')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#141e23')
  call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#141e23')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#141e23')
  call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#141e23')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#141e23')
  call NERDTreeHighlightFile('ts', 'Blue', 'none', '#6699cc', '#141e23')
  call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#141e23')
  call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#141e23')
  call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#141e23')

"}}}

" neocomplete {{{

  " let g:neocomplete#data_directory = '~/.vim/neocomplete'
  " let g:neocomplete#enable_at_startup = 1
  " let g:neocomplete#enable_auto_select = 1
  " let g:neocomplete#enable_smart_case = 1
  " let g:neocomplete#auto_completion_start_length = 2
  "
  " " increase limit for tag cache files
  " let g:neocomplete#sources#tags#cache_limit_size = 33554432 " 32MB
  "
  " " always use completions from all buffers
  " if !exists('g:neocomplete#same_filetypes')
  "   let g:neocomplete#same_filetypes = {}
  " endif
  " let g:neocomplete#same_filetypes._ = '_'
  "
  " " enable omni-completion for Ruby and PHP
  " call neocomplete#util#set_default_dictionary(
  "   \'g:neocomplete#sources#omni#input_patterns', 'ruby',
  "   \'[^. *\t]\.\h\w*\|\h\w*::\w*')
  " call neocomplete#util#set_default_dictionary(
  "   \'g:neocomplete#sources#omni#input_patterns', 'php',
  "   \'[^. \t]->\h\w*\|\h\w*::\w*')
  "
  "
  " " Plugin key-mappings.
  " inoremap <expr> <C-g> neocomplete#undo_completion()
  " inoremap <expr> <C-l> neocomplete#complete_common_string()
  "
  " " Recommended key-mappings.
  " " <CR>: cancel popup and insert newline.
  " inoremap <silent> <CR> <C-r>=neocomplete#smart_close_popup()<CR><CR>
  " " <TAB>: completion.
  " inoremap <expr> <Tab> pumvisible() ? "\<C-y>" : "\<Tab>"
  " " <C-h>, <BS>: close popup and delete backword char.
  " inoremap <expr> <C-h> neocomplete#smart_close_popup()."\<C-h>"
  " inoremap <expr> <BS>  neocomplete#smart_close_popup()."\<C-h>"
  " inoremap <expr> <C-y> neocomplete#close_popup()
  " inoremap <expr> <C-e> neocomplete#cancel_popup()
  "
" }}}

" ALE Linter {{{

  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = '⚠'

  let g:ale_statusline_format = ['✗ %d', '⚠ %d', '⬥ ok']

  let g:ale_echo_msg_error_str = 'Error'
  let g:ale_echo_msg_warning_str = 'Warn'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

  set statusline+=%#warningmsg#
  set statusline+=%{ALEGetStatusLine()}
  set statusline+=%*

  " let g:ale_javascript_jshint_executable = 'jshint esversion:6'

" }}}

" Ultisnips & YouCompleteMe {{{
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsEditSplit="vertical"

 " YCM compatible with UltiSnips (using supertab)
  let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
  let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
  let g:SuperTabDefaultCompletionType = '<C-n>'

" }}}
